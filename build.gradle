apply plugin: 'java-library'

group = 'etri'
version = '20.02.12'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

ext {
	slf4j_version = '1.7.32'
	guava_version = '30.1.1-jre'
	rxjava2_version = '2.2.21'
	picocli_version = '3.9.6'
//	picocli_version = '4.6.2'
	
	cglib_version = '3.3.0'
	commons_io_version = '2.11.0'
	commons_text_version = '1.8'
	
	junit_version = '4.13.2'
	mockito_version = '3.12.4'
	hamcrest_version = '1.3'
}

repositories {
    mavenCentral()
}

dependencies {
	api "org.slf4j:slf4j-api:${slf4j_version}"
	api "com.google.guava:guava:${guava_version}"
	
	// command line parser
	implementation "info.picocli:picocli:${picocli_version}"
	
	implementation "commons-io:commons-io:${commons_io_version}"
	implementation "org.apache.commons:commons-text:${commons_text_version}"
	implementation "cglib:cglib:${cglib_version}"
	
	testImplementation "junit:junit:${junit_version}"
	testImplementation "org.mockito:mockito-core:${mockito_version}"
	testImplementation "org.hamcrest:hamcrest-all:${hamcrest_version}"
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

javadoc {
	options.encoding = 'UTF-8'
	options.links("https://docs.oracle.com/javase/8/docs/api/")
	options.links("https://google.github.io/guava/releases/23.0/api/docs/")
	options.links("http://reactivex.io/RxJava/javadoc/")
}
task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
}

apply plugin: 'maven-publish'
publishing {
	publications {
		commonGrpc(MavenPublication) {
			from components.java
			
			artifact sourceJar
			artifact javadocJar
		}
	}
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.startsWith("src/test/") ) {
							entry.output = 'test_classes'
						}
						else {
							entry.output = 'classes'
						}
					}
				}
			}
		}
	}
}