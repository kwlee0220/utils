plugins {
	id 'java-library'
	id 'eclipse'
	// id 'maven-publish'	// Maven 배포 플러그인
	// id 'signing'		// GPG 서명 플러그인
}

group = 'etri'
version = '24.12.25'

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
	// withSourcesJar()
	// withJavadocJar()
}
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

ext {
	logback_version = '1.3.14'
	guava_version = '33.4.8-jre'
	checker_version = '3.49.4'
	rxjava3_version = '3.1.8'
	picocli_version = '4.6.2'
	jackson_version = '2.18.2'
	lombok_version = '1.18.32'
	
	cglib_version = '3.3.0'
	commons_io_version = '2.11.0'
	commons_text_version = '1.12.0'
	okhttp_version = '4.12.0'
	
	jakarta_persistence_version = '3.1.0'
	
	junit_version = '4.13.2'
	mockito_version = '3.12.4'
	hamcrest_version = '1.3'
	
	commons_beanutils_version = '1.9.4'
	commons_logging_version = '1.3.5'
}

repositories {
    mavenCentral()
}

dependencies {
	// Logback
	implementation "ch.qos.logback:logback-classic:${logback_version}"
	
	api "com.google.guava:guava:${guava_version}"
	implementation("org.checkerframework:checker:${checker_version}")
	api "io.reactivex.rxjava3:rxjava:${rxjava3_version}"

	// Lombok (from the project :utils)
	compileOnly "org.projectlombok:lombok:${lombok_version}"
	annotationProcessor "org.projectlombok:lombok:${lombok_version}"
	
	// command line parser
	implementation "info.picocli:picocli:${picocli_version}"

	// jackson json parser
	implementation "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_version}"
	
	implementation "commons-io:commons-io:${commons_io_version}"
	implementation "org.apache.commons:commons-text:${commons_text_version}"
	implementation "cglib:cglib:${cglib_version}"
	
	// Apache Commons BeanUtils
	implementation ("commons-beanutils:commons-beanutils:${commons_beanutils_version}") {
		exclude group: 'commons-logging', module: 'commons-logging'
	}
	
	// HTTP Client
	implementation "com.squareup.okhttp3:okhttp:${okhttp_version}"
	
	// jakarta api
	implementation "jakarta.persistence:jakarta.persistence-api:${jakarta_persistence_version}"
	
	testImplementation "junit:junit:${junit_version}"
	testImplementation "org.mockito:mockito-core:${mockito_version}"
}

// javadoc {
// 	options.encoding = 'UTF-8'
// 	options.links("https://docs.oracle.com/javase/8/docs/api/")
// 	options.links("https://google.github.io/guava/releases/23.0/api/docs/")
// 	options.links("http://reactivex.io/RxJava/javadoc/")
	
// 	options.addStringOption('Xdoclint:none', '-quiet')
// }
//task javadocJar(type: Jar) {
//	from javadoc.destinationDir
//}

//artifacts {
//	archives sourceJar
//	archives javadocJar
//}

eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'build/classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.contains('/test/') ) {
							entry.output = 'build/test_classes'
						}
						else {
							entry.output = 'build/classes'
						}
					}
				}
			}
		}
	}
}

// publishing {
//     publications {
//         mavenJava(MavenPublication) {
//             from components.java

//             pom {
//                 name.set('common.utils') // 프로젝트 이름
//                 description.set('Java common library') // 프로젝트 설명
//                 url.set('https://github.com/username/repository') // 프로젝트 URL
//                 licenses {
//                     license {
//                         name.set('The Apache License, Version 2.0') // 라이선스
//                         url.set('https://www.apache.org/licenses/LICENSE-2.0')
//                     }
//                 }
//                 developers {
//                     developer {
//                         id.set('developerId') // 개발자 ID
//                         name.set('Kang-Woo Lee') // 개발자 이름
//                         email.set('kwlee@etri.re.kr') // 이메일
//                     }
//                 }
//                 scm {
//                     connection.set('scm:git:git://github.com/username/repository.git')
//                     developerConnection.set('scm:git:ssh://github.com/username/repository.git')
//                     url.set('https://github.com/username/repository')
//                 }
//             }
//         }
//     }
// }

// signing {
//     useGpgCmd()
//     sign publishing.publications.mavenJava
// }
